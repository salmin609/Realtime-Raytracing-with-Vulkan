#version 460
#extension GL_EXT_shader_explicit_arithmetic_types_int64  : require
#extension GL_GOOGLE_include_directive : enable

#include "shared_structs.h"

const int GROUP_SIZE = 128;
layout(local_size_x = GROUP_SIZE, local_size_y = 1, local_size_z = 1) in;
layout(set = 0, binding = 0, rgba32f) uniform image2D inImage;
layout(set = 0, binding = 1, rgba32f) uniform image2D outImage;
layout(set = 0, binding = 2, rgba32f) uniform image2D kdBuff;
layout(set = 0, binding = 3, rgba32f) uniform image2D ndBuff;

layout(push_constant) uniform _pcDenoise { PushConstantDenoise pc; };
float kernel[5] = float[5](1.0/16.0, 4.0/16.0, 6.0/16.0, 4.0/16.0, 1.0/16.0);

void main()
{
    ivec2 gpos = ivec2(gl_GlobalInvocationID.xy);

    // Values for the center pixel being denoised
    vec3 kval = imageLoad(kdBuff, gpos).xyz + vec3(0.1);  // its firsthit Kd color
    vec3  cval = imageLoad(inImage, gpos).xyz / kval; // The pixel's noisy value, demodulated
    float Nval = imageLoad(inImage, gpos).w;  // The noisy pixel's count (denominator for average)
    if (dot(kval,kval) == 0.0) cval = vec3(1);
    float dval = imageLoad(ndBuff, gpos).w;  // The pixel's firsthit depth
    vec3 nval = imageLoad(ndBuff, gpos).xyz;  // The pixel's firsthit normal

    vec3 sum = vec3(0.0);
    float cum_w = 0.0;

    // In a 5x5 loop, retrieve neighboring pixels values (as for above
    // central pixel) with offsets controlled by pc.stepwidth.  This
    // is the A-Trous (with holes) part of the algorithm.

    for (int i=-2;  i<=2;  i++)
        for (int j=-2;  j<=2;  j++) 
        {
            ivec2 offset = ivec2(i,j) * pc.stepWidth;
            vec3 ktmp = imageLoad(kdBuff, gpos + offset).xyz + vec3(0.1);
            vec3 ctmp = imageLoad(inImage, gpos + offset).xyz / ktmp;
            
            //luminance
            float l_w = 1.f;

            //Normal
            float stepWidth = pc.stepWidth;
            vec3 ntmp = imageLoad(ndBuff, gpos + offset).xyz;
            vec3 nDiff = nval - ntmp;
            float dist2 = max(dot(nDiff , nDiff) / (stepWidth * stepWidth), 0.f);
            float n_w = min(exp(-(dist2) / pc.normFactor), 1.f);

            //Depth
            float dtmp = imageLoad(ndBuff, gpos + offset).w;
            float dDiff = dval - dtmp;
            float dist3 = dDiff * dDiff;
            float d_w = min(exp(-(dist3) / pc.depthFactor), 1.f);

            float kernelI = kernel[i + 2];
            float kernelJ = kernel[j + 2];
            float weight = l_w * d_w * n_w * kernelI * kernelJ;

            sum += ctmp * weight;
            cum_w += weight;
        }
    vec3 val = kval * sum / cum_w; // Re-modulate the color

    if (cum_w == 0.0) 
        val = cval;

    imageStore(outImage, gpos, vec4(val,Nval));
}
